// 将下方代码复制到 hbx 工具 - 代码块设置 - javascript代码块
{
	"vk.callFunction(发起云函数请求)": {
	 "prefix": "vk.callFunction",
	 "body": [
			 "vk.callFunction({",
			 "\turl: '云函数路径',",
			 "\ttitle:'请求中...',",
			 "\tdata:{",
			 "\t\t",
			 "\t},",
			 "\tsuccess(data) => {",
			 "\t\t$0",
			 "\t}",
			 "});"
		],
		"triggerAssist": false,
		"description": "发起一个云函数请求"
	},
	"vk.alert": {
	 "prefix": "vk.alert",
	 "body": [
			"vk.alert('$0');"
		],
		"triggerAssist": false,
		"description": "弹出提示框"
	},
	"vk.confirm": {
	 "prefix": "k.confirm",
	 "body": [
			"vk.confirm('内容','提示','确定','取消',function(res){",
			"\tif(res.confirm){",
			"\t\t$0",
			"\t}",
			"});"
		],
		"triggerAssist": false,
		"description": "弹出二次确认框"
	},
	"vk.toast": {
	 "prefix": "vk.toast",
	 "body": [
			"vk.toast('$0','none');"
		],
		"triggerAssist": false,
		"description": "弹出toast提示"
	},
	"vk.navigateTo": {
	 "prefix": "vk.navigateTo",
	 "body": [
			"vk.navigateTo('$0');"
		],
		"triggerAssist": false,
		"description": "页面跳转"
	},
	"vk.navigateBack": {
	 "prefix": "vk.navigateBack",
	 "body": [
			"vk.navigateBack();"
		],
		"triggerAssist": false,
		"description": "页面返回"
	},
	"vk.reLaunch": {
	 "prefix": "vk.reLaunch",
	 "body": [
			"vk.reLaunch('$0');"
		],
		"triggerAssist": false,
		"description": "关闭所有页面，打开到应用内的某个页面。"
	},
	"vk.getStorageSync": {
	 "prefix": "vk.getStorageSync",
	 "body": [
			"vk.getStorageSync(key$0);"
		],
		"triggerAssist": false,
		"description": "获取前端本地缓存"
	},
	"vk.setStorageSync": {
	 "prefix": "vk.setStorageSync",
	 "body": [
			"vk.setStorageSync(key,data);"
		],
		"triggerAssist": false,
		"description": "保存前端本地缓存"
	},
	"vk.removeStorageSync": {
	 "prefix": "vk.removeStorageSync",
	 "body": [
			"vk.removeStorageSync($0);"
		],
		"triggerAssist": false,
		"description": "删除前端本地缓存"
	},
	"vk.clearStorageSync": {
	 "prefix": "vk.clearStorageSync",
	 "body": [
			"vk.clearStorageSync();"
		],
		"triggerAssist": false,
		"description": "清空前端本地缓存"
	},
	"vk.getStorageInfoSync": {
	 "prefix": "vk.getStorageInfoSync",
	 "body": [
			"vk.getStorageInfoSync();"
		],
		"triggerAssist": false,
		"description": "获取前端本地缓存信息"
	},
	"vk.globalDataCache.get": {
	 "prefix": "vk.globalDataCache.get",
	 "body": [
			"await vk.globalDataCache.get($0);"
		],
		"triggerAssist": false,
		"description": "获取云函数全局缓存"
	},
	"vk.globalDataCache.set": {
	 "prefix": "vk.globalDataCache.set",
	 "body": [
			"await vk.globalDataCache.set(key$0, value, second);"
		],
		"triggerAssist": false,
		"description": "设置云函数全局缓存"
	},
	"vk.globalDataCache.del": {
	 "prefix": "vk.globalDataCache.del",
	 "body": [
			"await vk.globalDataCache.del($0);"
		],
		"triggerAssist": false,
		"description": "删除云函数全局缓存"
	},
	"vk.globalDataCache.clear": {
	 "prefix": "k.globalDataCache.clear",
	 "body": [
			"await vk.globalDataCache.clear($0);"
		],
		"triggerAssist": false,
		"description": "清空云函数全局缓存"
	},
	"vk.globalDataCache.count": {
	 "prefix": "vk.globalDataCache.count",
	 "body": [
			"await vk.globalDataCache.count({$0});"
		],
		"triggerAssist": false,
		"description": "获取云函数全局缓存总数"
	},
	"vk.pubfn.objectAssign": {
	 "prefix": "vk.pubfn.objectAssign",
	 "body": [
			"vk.pubfn.objectAssign(obj1, obj2);"
		],
		"triggerAssist": false,
		"description": "将obj2的属性赋值给obj1"
	},
	"vk.pubfn.copyObject": {
	 "prefix": "vk.pubfn.copyObject",
	 "body": [
			"vk.pubfn.copyObject($0);"
		],
		"triggerAssist": false,
		"description": "复制一份对象-解除对象映射关系"
	},
	"vk.pubfn.getCommonTime": {
	 "prefix": "vk.pubfn.getCommonTime",
	 "body": [
			"$0vk.pubfn.getCommonTime();"
		],
		"triggerAssist": false,
		"description": "获取时间范围"
	},
	"vk.pubfn.getData": {
	 "prefix": "vk.pubfn.getData",
	 "body": [
			"vk.pubfn.getData(dataObj, name);$0"
		],
		"triggerAssist": false,
		"description": "自动根据字符串路径获取对象中的值支持.和[] , 且任意一个值为undefined时,不会报错,会直接返回undefined"
	},
	"vk.pubfn.isNull": {
	 "prefix": "vk.pubfn.isNull",
	 "body": [
			"vk.pubfn.isNull($0);"
		],
		"triggerAssist": false,
		"description": "检测参数是否为空"
	},
	"vk.pubfn.isNotNull": {
	 "prefix": "vk.pubfn.isNotNull",
	 "body": [
			"vk.pubfn.isNotNull($0);"
		],
		"triggerAssist": false,
		"description": "检测参数是否不为空"
	},
	"vk.pubfn.isNullOne": {
	 "prefix": "vk.pubfn.isNullOne",
	 "body": [
			"vk.pubfn.isNullOne($0);"
		],
		"triggerAssist": false,
		"description": "检测所有参数 - 是否至少有一个为空"
	},
	"vk.pubfn.isNullOneByObject": {
	 "prefix": "vk.pubfn.isNullOneByObject",
	 "body": [
			"vk.pubfn.isNullOneByObject($0);"
		],
		"triggerAssist": false,
		"description": "检测整个对象是否没有一个属性是空值,如果有空值,则返回首个是空值的属性名"
	},
	"vk.pubfn.isNullAll": {
	 "prefix": "vk.pubfn.isNullAll",
	 "body": [
			"vk.pubfn.isNullAll($0);"
		],
		"triggerAssist": false,
		"description": "检测所有参数 - 是否全部为空"
	},
	"vk.pubfn.isNotNullAll": {
	 "prefix": "vk.pubfn.isNotNullAll",
	 "body": [
			"vk.pubfn.isNotNullAll($0);"
		],
		"triggerAssist": false,
		"description": "检测所有参数 - 是否全部都不为空"
	},
	"vk.pubfn.getListItem": {
	 "prefix": "vk.pubfn.getListItem",
	 "body": [
			"vk.pubfn.getListItem(list, key, value);"
		],
		"triggerAssist": false,
		"description": "获取对象数组中的某一个item,根据指定的键名和键值"
	},
	"vk.pubfn.getListIndex": {
	 "prefix": "vk.pubfn.getListIndex",
	 "body": [
			"vk.pubfn.getListIndex(list, key, value);"
		],
		"triggerAssist": false,
		"description": "获取对象数组中某个元素的index,根据指定的键名和键值"
	},
	"vk.pubfn.getListItemIndex": {
	 "prefix": "vk.pubfn.getListItemIndex",
	 "body": [
			"vk.pubfn.getListItemIndex(list, key, value);"
		],
		"triggerAssist": false,
		"description": "获取对象数组中某个元素的item和index,根据指定的键名和键值"
	},
	"vk.pubfn.arrayToJson": {
	 "prefix": "vk.pubfn.arrayToJson",
	 "body": [
			"vk.pubfn.arrayToJson(list, key);"
		],
		"triggerAssist": false,
		"description": "数组转对象 - 将对象数组转成json"
	},
	"vk.pubfn.random": {
	 "prefix": "vk.pubfn.random",
	 "body": [
			"vk.pubfn.random($0);"
		],
		"triggerAssist": false,
		"description": "产生指定位数的随机数(支持任意字符,默认纯数字)"
	},
	"vk.pubfn.hidden": {
	 "prefix": "vk.pubfn.hidden",
	 "body": [
			"vk.pubfn.hidden(str, first, last);"
		],
		"triggerAssist": false,
		"description": "将手机号,账号等隐藏中间字段"
	},
	"vk.pubfn.checkArrayIntersection": {
	 "prefix": "vk.pubfn.checkArrayIntersection",
	 "body": [
			"vk.pubfn.checkArrayIntersection(arr1, arr2);"
		],
		"triggerAssist": false,
		"description": "判断常量数组A是否至少有一个元素在常量数组B中存在(两数组有交集)"
	},
	"vk.pubfn.arrayToTree": {
	 "prefix": "vk.pubfn.arrayToTree",
	 "body": [
			"vk.pubfn.arrayToTree(treeData, treeProps);"
		],
		"triggerAssist": false,
		"description": "数组结构转树形结构"
	},
	"vk.pubfn.treeToArray": {
	 "prefix": "vk.pubfn.treeToArray",
	 "body": [
			"vk.pubfn.treeToArray(treeData, treeProps);"
		],
		"triggerAssist": false,
		"description": "树形结构转数组结构"
	},
	"vk.pubfn.createOrderNo": {
	 "prefix": "vk.pubfn.createOrderNo",
	 "body": [
			"vk.pubfn.createOrderNo();"
		],
		"triggerAssist": false,
		"description": "产生订单号，不依赖数据库，高并发时性能高（理论上会重复，但概率非常非常低）"
	},
	"vk.pubfn.getCurrentPage": {
	 "prefix": "vk.pubfn.getCurrentPage",
	 "body": [
			"vk.pubfn.getCurrentPage();"
		],
		"triggerAssist": false,
		"description": "获取当前页面实例"
	},
	"userDao.findById": {
	 "prefix": "dao.",
	 "body": [
			"await vk.daoCenter.userDao.findById(user_id$0, util);"
		],
		"triggerAssist": false,
		"description": "获取用户信息"
	},
	
	"setTimeout": {
	 "prefix": "qq.",
	 "body": [
			"setTimeout(() => {",
			"\t$0",
			"}, 1000);"
		],
		"triggerAssist": false,
		"description": "延迟执行"
	},
	"for循环": {
	 "prefix": "qq.",
	 "body": [
			"for(let i=0; i<list.length; i++){",
			"\tlet item = list[i];",
			"\t$0",
			"}"
		],
		"triggerAssist": false,
		"description": "for循环"
	},
	"Array.map": {
	 "prefix": "qq.",
	 "body": [
			"list.map((item, index) => {",
			"\t$0",
			"});"
		],
		"triggerAssist": false,
		"description": "数组遍历"
	},
	"splice": {
	 "prefix": "qq.",
	 "body": [
			"list.splice(index,1);"
		],
		"triggerAssist": false,
		"description": "数组删除"
	},
	"try{...} catch(err){...}": {
	 "prefix": "try",
	 "body": [
			"try {",
			"\t$0",
			"}catch(err){",
			"\t",
			"}"
		],
		"triggerAssist": false,
		"description": "try-catch"
	}
	
		
	
}
